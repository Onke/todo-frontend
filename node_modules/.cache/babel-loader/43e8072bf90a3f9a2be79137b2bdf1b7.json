{"ast":null,"code":"import fetch from \"node-fetch\";\nconst API_URL = \"http://localhost:9000/todos/\";\n\nfunction checkResponse(response) {\n  if (response.ok) {\n    return response;\n  } else throw new Error(`The HTTP status of the reponse: ${response.status} (${response.statusText})`);\n}\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Accept: \"application/json\"\n};\n\nasync function createTodo(task) {\n  const newTask = {\n    task: task,\n    completed: false\n  };\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    body: JSON.stringify(newTask),\n    headers: headers\n  }).then(checkResponse);\n  return res.json();\n}\n\nasync function deleteTodo(id) {\n  const res = await fetch(`${API_URL}${id}`, {\n    method: \"DELETE\",\n    headers: headers\n  }).then(checkResponse);\n  return res.json();\n}\n\nasync function updateTodo(id, payload) {\n  const res = await fetch(`${API_URL}${id}`, {\n    method: \"PUT\",\n    body: JSON.stringify(payload),\n    headers: headers\n  }).then(checkResponse);\n  return res.json();\n}\n\nasync function getAllTodos() {\n  const res = await fetch(API_URL, {\n    method: \"GET\",\n    headers: headers\n  }).then(checkResponse);\n  return res.json();\n}\n\nconsole.log(createTodo);\nexport default {\n  createTodo,\n  deleteTodo,\n  updateTodo,\n  getAllTodos\n};","map":{"version":3,"sources":["/home/vince/Documents/Github/todo-app/todo-frontend/src/APIHelper.js"],"names":["fetch","API_URL","checkResponse","response","ok","Error","status","statusText","headers","Accept","createTodo","task","newTask","completed","res","method","body","JSON","stringify","then","json","deleteTodo","id","updateTodo","payload","getAllTodos","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,MAAMC,OAAO,GAAG,8BAAhB;;AAEA,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC/B,MAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,WAAOD,QAAP;AACD,GAFD,MAGE,MAAM,IAAIE,KAAJ,CACH,mCAAkCF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,GADvE,CAAN;AAGH;;AAED,MAAMC,OAAO,GAAG;AACd,kBAAgB,kBADF;AAEdC,EAAAA,MAAM,EAAE;AAFM,CAAhB;;AAKA,eAAeC,UAAf,CAA0BC,IAA1B,EAAgC;AAC9B,QAAMC,OAAO,GAAG;AACdD,IAAAA,IAAI,EAAEA,IADQ;AAEdE,IAAAA,SAAS,EAAE;AAFG,GAAhB;AAKA,QAAMC,GAAG,GAAG,MAAMd,KAAK,CAACC,OAAD,EAAU;AAC/Bc,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFyB;AAG/BJ,IAAAA,OAAO,EAAEA;AAHsB,GAAV,CAAL,CAIfW,IAJe,CAIVjB,aAJU,CAAlB;AAMA,SAAOY,GAAG,CAACM,IAAJ,EAAP;AACD;;AAED,eAAeC,UAAf,CAA0BC,EAA1B,EAA8B;AAC5B,QAAMR,GAAG,GAAG,MAAMd,KAAK,CAAE,GAAEC,OAAQ,GAAEqB,EAAG,EAAjB,EAAoB;AACzCP,IAAAA,MAAM,EAAE,QADiC;AAEzCP,IAAAA,OAAO,EAAEA;AAFgC,GAApB,CAAL,CAGfW,IAHe,CAGVjB,aAHU,CAAlB;AAKA,SAAOY,GAAG,CAACM,IAAJ,EAAP;AACD;;AAED,eAAeG,UAAf,CAA0BD,EAA1B,EAA8BE,OAA9B,EAAuC;AACrC,QAAMV,GAAG,GAAG,MAAMd,KAAK,CAAE,GAAEC,OAAQ,GAAEqB,EAAG,EAAjB,EAAoB;AACzCP,IAAAA,MAAM,EAAE,KADiC;AAEzCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeM,OAAf,CAFmC;AAGzChB,IAAAA,OAAO,EAAEA;AAHgC,GAApB,CAAL,CAIfW,IAJe,CAIVjB,aAJU,CAAlB;AAMA,SAAOY,GAAG,CAACM,IAAJ,EAAP;AACD;;AAED,eAAeK,WAAf,GAA6B;AAC3B,QAAMX,GAAG,GAAG,MAAMd,KAAK,CAACC,OAAD,EAAU;AAC/Bc,IAAAA,MAAM,EAAE,KADuB;AAE/BP,IAAAA,OAAO,EAAEA;AAFsB,GAAV,CAAL,CAGfW,IAHe,CAGVjB,aAHU,CAAlB;AAKA,SAAOY,GAAG,CAACM,IAAJ,EAAP;AACD;;AAEDM,OAAO,CAACC,GAAR,CAAYjB,UAAZ;AAEA,eAAe;AAAEA,EAAAA,UAAF;AAAcW,EAAAA,UAAd;AAA0BE,EAAAA,UAA1B;AAAsCE,EAAAA;AAAtC,CAAf","sourcesContent":["import fetch from \"node-fetch\";\n\nconst API_URL = \"http://localhost:9000/todos/\";\n\nfunction checkResponse(response) {\n  if (response.ok) {\n    return response;\n  } else\n    throw new Error(\n      `The HTTP status of the reponse: ${response.status} (${response.statusText})`\n    );\n}\n\nconst headers = {\n  \"Content-Type\": \"application/json\",\n  Accept: \"application/json\",\n};\n\nasync function createTodo(task) {\n  const newTask = {\n    task: task,\n    completed: false,\n  };\n\n  const res = await fetch(API_URL, {\n    method: \"POST\",\n    body: JSON.stringify(newTask),\n    headers: headers,\n  }).then(checkResponse);\n\n  return res.json();\n}\n\nasync function deleteTodo(id) {\n  const res = await fetch(`${API_URL}${id}`, {\n    method: \"DELETE\",\n    headers: headers,\n  }).then(checkResponse);\n\n  return res.json();\n}\n\nasync function updateTodo(id, payload) {\n  const res = await fetch(`${API_URL}${id}`, {\n    method: \"PUT\",\n    body: JSON.stringify(payload),\n    headers: headers,\n  }).then(checkResponse);\n\n  return res.json();\n}\n\nasync function getAllTodos() {\n  const res = await fetch(API_URL, {\n    method: \"GET\",\n    headers: headers,\n  }).then(checkResponse);\n\n  return res.json();\n}\n\nconsole.log(createTodo);\n\nexport default { createTodo, deleteTodo, updateTodo, getAllTodos };\n"]},"metadata":{},"sourceType":"module"}